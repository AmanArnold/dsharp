"use strict";

define('test', ['ss'], function(ss) {
  var $global = this;

  // BasicTests.PublicClass

  function BasicTests$PublicClass() {
  }
  var BasicTests$PublicClass$ = {
    format: function(i) {
      return '0';
    },
    parse: function(s) {
      return 0;
    }
  };


  // BasicTests.InternalClass

  function BasicTests$InternalClass() {
  }
  var BasicTests$InternalClass$ = {
    format: function(i) {
      return null;
    },
    parse: function(s) {
      return 0;
    }
  };


  // BasicTests.Tests.Helpers.Foo

  function BasicTests$Tests$Helpers$Foo() {
  }
  var BasicTests$Tests$Helpers$Foo$ = {

  };


  // BasicTests.Tests.PublicTests

  function BasicTests$Tests$PublicTests() {
  }
  var BasicTests$Tests$PublicTests$ = {
    testFormat: function() {
      QUnit.expect(1);
      var testee = new BasicTests$PublicClass();
      var s = testee.format(0);
      QUnit.equal(s, '0', "Expected '0' for result.");
    }
  };


  // BasicTests.Tests.InternalTests

  function BasicTests$Tests$InternalTests() {
  }
  var BasicTests$Tests$InternalTests$ = {
    testFormat: function() {
      QUnit.expect(1);
      var testee = new BasicTests$InternalClass();
      var s = testee.format(0);
      QUnit.equal(s, '0', "Expected '0' for result.");
    },
    testParse: function() {
      QUnit.expect(1);
      var testee = new BasicTests$InternalClass();
      var i = testee.parse('0');
      QUnit.equal(i, 0, 'Expected 0 for result.');
    },
    setup: function() {
      this._startTime$2 = ss.now();
    },
    cleanup: function() {
      this._endTime$2 = ss.now();
    }
  };


  var $exports = ss.module('test',
    {
      InternalClass: [ BasicTests$InternalClass, BasicTests$InternalClass$, null ],
      Foo: [ BasicTests$Tests$Helpers$Foo, BasicTests$Tests$Helpers$Foo$, null ],
      PublicTests: [ BasicTests$Tests$PublicTests, BasicTests$Tests$PublicTests$, null ],
      InternalTests: [ BasicTests$Tests$InternalTests, BasicTests$Tests$InternalTests$, null ]
    },
    {
      PublicClass: [ BasicTests$PublicClass, BasicTests$PublicClass$, null ]
    });


  module('PublicTests', {
    setup: function() {
      this.instance = new BasicTests$Tests$PublicTests();
    },
    teardown: function() {
      delete this.instance;
    }
  });

  test('testFormat', function() {
    this.instance.testFormat();
  });

  module('InternalTests', {
    setup: function() {
      this.instance = new BasicTests$Tests$InternalTests();
      this.instance.setup();
    },
    teardown: function() {
      this.instance.cleanup();
      delete this.instance;
    }
  });

  test('testFormat', function() {
    this.instance.testFormat();
  });
  test('testParse', function() {
    this.instance.testParse();
  });

  return $exports;
});
