Type.registerNamespace('TypeTests');

////////////////////////////////////////////////////////////////////////////////
// TypeTests.IMyInterface

TypeTests.IMyInterface = function() { };
TypeTests.IMyInterface.prototype = {
    start : null,
    Stop : null,
    resume : null
}
TypeTests.IMyInterface.registerInterface('TypeTests.IMyInterface');


////////////////////////////////////////////////////////////////////////////////
// TypeTests.EmptyClass

TypeTests.EmptyClass = function TypeTests_EmptyClass() {
}


////////////////////////////////////////////////////////////////////////////////
// TypeTests.SingleMemberClass

TypeTests.SingleMemberClass = function TypeTests_SingleMemberClass() {
}
TypeTests.SingleMemberClass.prototype = {
    
    run: function TypeTests_SingleMemberClass$run() {
    }
}


////////////////////////////////////////////////////////////////////////////////
// TypeTests.DerivedMemberClass

TypeTests.DerivedMemberClass = function TypeTests_DerivedMemberClass() {
    TypeTests.DerivedMemberClass.initializeBase(this);
}


////////////////////////////////////////////////////////////////////////////////
// TypeTests.MergedMembersClass

TypeTests.MergedMembersClass = function TypeTests_MergedMembersClass() {
}
TypeTests.MergedMembersClass.prototype = {
    foo: false,
    bar: null,
    
    testMethod: function TypeTests_MergedMembersClass$testMethod() {
        return null;
    }
}


////////////////////////////////////////////////////////////////////////////////
// TypeTests.DerivedMergedMembersClass

TypeTests.DerivedMergedMembersClass = function TypeTests_DerivedMergedMembersClass() {
    TypeTests.DerivedMergedMembersClass.initializeBase(this);
    this.name = this.bar + this.bar + 'Name';
}
TypeTests.DerivedMergedMembersClass.prototype = {
    name: null,
    value: null,
    
    testMethod: function TypeTests_DerivedMergedMembersClass$testMethod() {
        return null;
    },
    
    testMethod2: function TypeTests_DerivedMergedMembersClass$testMethod2() {
        return this.get_item('foo');
    },
    
    someMethod: function TypeTests_DerivedMergedMembersClass$someMethod() {
        var e1 = document.getElementById(this.bar);
        var e2 = document.getElementById(this.name);
        var e3 = document.getElementById(this.bar);
        var s = this.testMethod() + TypeTests.DerivedMergedMembersClass.callBaseMethod(this, 'testMethod');
    },
    get_item: function TypeTests_DerivedMergedMembersClass$get_item(s) {
        return s;
    }
}


////////////////////////////////////////////////////////////////////////////////
// TypeTests.MyClass

TypeTests.MyClass = function TypeTests_MyClass() {
}
TypeTests.MyClass.prototype = {
    
    start: function TypeTests_MyClass$start() {
    },
    
    Stop: function TypeTests_MyClass$Stop() {
    },
    
    resume: function TypeTests_MyClass$resume() {
    }
}


////////////////////////////////////////////////////////////////////////////////
// TypeTests.SomeClass

TypeTests.SomeClass = function TypeTests_SomeClass() {
}
TypeTests.SomeClass.prototype = {
    
    close: function TypeTests_SomeClass$close() {
    },
    
    _cancel: function TypeTests_SomeClass$_cancel() {
    },
    
    run: function TypeTests_SomeClass$run() {
    }
}


////////////////////////////////////////////////////////////////////////////////
// TypeTests.App

TypeTests.App = function TypeTests_App() {
    var s;
    s.run();
    var d;
    d.bar = d.name;
    d.value = d.foo;
    var mc;
    mc.start();
    mc.Stop();
    mc.resume();
}


TypeTests.EmptyClass.registerClass('TypeTests.EmptyClass');
TypeTests.SingleMemberClass.registerClass('TypeTests.SingleMemberClass');
TypeTests.DerivedMemberClass.registerClass('TypeTests.DerivedMemberClass', TypeTests.SingleMemberClass);
TypeTests.MergedMembersClass.registerClass('TypeTests.MergedMembersClass');
TypeTests.DerivedMergedMembersClass.registerClass('TypeTests.DerivedMergedMembersClass', TypeTests.MergedMembersClass);
TypeTests.MyClass.registerClass('TypeTests.MyClass', null, TypeTests.IMyInterface);
TypeTests.SomeClass.registerClass('TypeTests.SomeClass');
TypeTests.App.registerClass('TypeTests.App');
