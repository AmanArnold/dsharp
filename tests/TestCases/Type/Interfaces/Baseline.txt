Type.registerNamespace('TypeTests');

////////////////////////////////////////////////////////////////////////////////
// TypeTests.IMarker

TypeTests.IMarker = function() { };
TypeTests.IMarker.prototype = {

}
TypeTests.IMarker.registerInterface('TypeTests.IMarker');


////////////////////////////////////////////////////////////////////////////////
// TypeTests.ISerializable

TypeTests.ISerializable = function() { };
TypeTests.ISerializable.prototype = {
    serialize : null
}
TypeTests.ISerializable.registerInterface('TypeTests.ISerializable');


////////////////////////////////////////////////////////////////////////////////
// TypeTests.IRunnable

TypeTests.IRunnable = function() { };
TypeTests.IRunnable.prototype = {
    get_canRun : null,
    run : null
}
TypeTests.IRunnable.registerInterface('TypeTests.IRunnable');


////////////////////////////////////////////////////////////////////////////////
// TypeTests.MyObject

TypeTests.MyObject = function TypeTests_MyObject() {
}
TypeTests.MyObject.prototype = {
    
    dispose: function TypeTests_MyObject$dispose() {
    }
}


////////////////////////////////////////////////////////////////////////////////
// TypeTests.MyObject2

TypeTests.MyObject2 = function TypeTests_MyObject2() {
    TypeTests.MyObject2.initializeBase(this);
}
TypeTests.MyObject2.prototype = {
    
    get_canRun: function TypeTests_MyObject2$get_canRun() {
        return true;
    },
    
    run: function TypeTests_MyObject2$run() {
    }
}


////////////////////////////////////////////////////////////////////////////////
// TypeTests.Foo

TypeTests.Foo = function TypeTests_Foo() {
}
TypeTests.Foo.prototype = {
    
    get_canRun: function TypeTests_Foo$get_canRun() {
        return true;
    },
    
    run: function TypeTests_Foo$run() {
    },
    
    serialize: function TypeTests_Foo$serialize() {
        return null;
    }
}


TypeTests.MyObject.registerClass('TypeTests.MyObject', null, ss.IDisposable);
TypeTests.MyObject2.registerClass('TypeTests.MyObject2', TypeTests.MyObject, TypeTests.IRunnable);
TypeTests.Foo.registerClass('TypeTests.Foo', null, TypeTests.IMarker, TypeTests.ISerializable, TypeTests.IRunnable);
