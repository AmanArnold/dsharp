Type.registerNamespace('MemberTests');

////////////////////////////////////////////////////////////////////////////////
// MemberTests.MyClass

MemberTests.MyClass = function() {
    this._value = 1;
}
MemberTests.MyClass.prototype = {
    _value: 0
}


////////////////////////////////////////////////////////////////////////////////
// MemberTests.MyClass2

MemberTests.MyClass2 = function() {
}


////////////////////////////////////////////////////////////////////////////////
// MemberTests.MyClass3

MemberTests.MyClass3 = function(arg, arg2) {
}


////////////////////////////////////////////////////////////////////////////////
// MemberTests.MyClass4

MemberTests.MyClass4 = function(arg, arg2, arg3) {
    MemberTests.MyClass4.initializeBase(this, [ arg, arg2 ]);
}


MemberTests.MyClass.registerClass('MemberTests.MyClass');
MemberTests.MyClass2.registerClass('MemberTests.MyClass2');
MemberTests.MyClass3.registerClass('MemberTests.MyClass3');
MemberTests.MyClass4.registerClass('MemberTests.MyClass4', MemberTests.MyClass3);
MemberTests.MyClass2.x = null;
MemberTests.MyClass2.x = 'Hello';
MemberTests.MyClass3.c = null;
MemberTests.MyClass3.c = new MemberTests.MyClass();
