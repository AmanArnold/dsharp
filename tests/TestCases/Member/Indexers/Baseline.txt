Type.registerNamespace('MemberTests');

////////////////////////////////////////////////////////////////////////////////
// MemberTests.IIndexable

MemberTests.IIndexable = function() { };
MemberTests.IIndexable.registerInterface('MemberTests.IIndexable');


////////////////////////////////////////////////////////////////////////////////
// MemberTests.Normal

MemberTests.Normal = function() {
    var i = this.get_item('name');
    this.set_item('name', i + 1);
}
MemberTests.Normal.prototype = {
    n: 0,
    get_item: function(name) {
        return this.n;
    },
    set_item: function(name, value) {
        this.n = value;
        return value;
    }
}


////////////////////////////////////////////////////////////////////////////////
// MemberTests.GetterOnly

MemberTests.GetterOnly = function() {
    var i = this.get_item('name');
}
MemberTests.GetterOnly.prototype = {
    n: 0,
    get_item: function(name) {
        return this.n;
    }
}


////////////////////////////////////////////////////////////////////////////////
// MemberTests.VirtualIndexer

MemberTests.VirtualIndexer = function() {
    var i = this.get_item('name');
    this.set_item('name', i + 1);
}
MemberTests.VirtualIndexer.prototype = {
    n: 0,
    get_item: function(name) {
        return this.n;
    },
    set_item: function(name, value) {
        this.n = value;
        return value;
    }
}


////////////////////////////////////////////////////////////////////////////////
// MemberTests.OverriddenIndexer

MemberTests.OverriddenIndexer = function() {
    MemberTests.OverriddenIndexer.initializeBase(this);
    var i = this.get_item('name');
    this.set_item('name', i + 1);
    var j = MemberTests.OverriddenIndexer.callBaseMethod(this, 'get_item', [ 'name' ]);
    MemberTests.OverriddenIndexer.callBaseMethod(this, 'set_item', [ 'name', 43 ]);
}
MemberTests.OverriddenIndexer.prototype = {
    get_item: function(name) {
        return MemberTests.OverriddenIndexer.callBaseMethod(this, 'get_item', [ name ]) + 1;
    },
    set_item: function(name, value) {
        MemberTests.OverriddenIndexer.callBaseMethod(this, 'set_item', [ name, value - 1 ]);
        return value;
    }
}


////////////////////////////////////////////////////////////////////////////////
// MemberTests.AbstractIndexer

MemberTests.AbstractIndexer = function() {
    var i = this.get_item('name');
    this.set_item('name', i + 1);
}
MemberTests.AbstractIndexer.prototype = {
    n: 0,

}


////////////////////////////////////////////////////////////////////////////////
// MemberTests.ImplementedIndexer

MemberTests.ImplementedIndexer = function() {
    MemberTests.ImplementedIndexer.initializeBase(this);
    var i = this.get_item('name');
    this.set_item('name', i + 1);
}
MemberTests.ImplementedIndexer.prototype = {
    n: 0,

}


////////////////////////////////////////////////////////////////////////////////
// MemberTests.MultipleArgs

MemberTests.MultipleArgs = function() {
    var i = this.get_item('name', 'name2', 'name3');
    this.set_item('name', 'name2', 'name3', i + 1);
}
MemberTests.MultipleArgs.prototype = {
    n: 0,
    get_item: function(first, middle, last) {
        var value = first + middle + last;
        return value.length;
    },
    set_item: function(first, middle, last, value) {
        this.n = value;
        return value;
    }
}


////////////////////////////////////////////////////////////////////////////////
// MemberTests.ImplementedIndexer2

MemberTests.ImplementedIndexer2 = function() {
}
MemberTests.ImplementedIndexer2.prototype = {
    get_item: function(index) {
        return 0;
    }
}


////////////////////////////////////////////////////////////////////////////////
// MemberTests.Test

MemberTests.Test = function() {
    var ma = new MemberTests.MultipleArgs();
    ma.set_item('1', '2', '3', ma.get_item('3', '2', '1'));
    var ii = new MemberTests.ImplementedIndexer();
    ii.set_item('big', ii.get_item('small'));
    var ai = ii;
    ai.set_item('small', ai.get_item('big'));
    var indexable = new MemberTests.ImplementedIndexer2();
    var o = indexable.get_item(0);
}


////////////////////////////////////////////////////////////////////////////////
// MemberTests.A

MemberTests.A = function() {
}
MemberTests.A.prototype = {
    get_item: function(name) {
        return name;
    }
}


////////////////////////////////////////////////////////////////////////////////
// MemberTests.B

MemberTests.B = function() {
    MemberTests.B.initializeBase(this);
}


////////////////////////////////////////////////////////////////////////////////
// MemberTests.C

MemberTests.C = function() {
    MemberTests.C.initializeBase(this);
}
MemberTests.C.main = function() {
    var c = new MemberTests.C();
    c.set_item('a', c.get_item('b'));
    var a = c;
    a.set_item('b', a.get_item('c'));
}
MemberTests.C.prototype = {
    get_item: function(name) {
        return name;
    }
}


MemberTests.Normal.registerClass('MemberTests.Normal');
MemberTests.GetterOnly.registerClass('MemberTests.GetterOnly');
MemberTests.VirtualIndexer.registerClass('MemberTests.VirtualIndexer');
MemberTests.OverriddenIndexer.registerClass('MemberTests.OverriddenIndexer', MemberTests.VirtualIndexer);
MemberTests.AbstractIndexer.registerClass('MemberTests.AbstractIndexer');
MemberTests.ImplementedIndexer.registerClass('MemberTests.ImplementedIndexer', MemberTests.AbstractIndexer);
MemberTests.MultipleArgs.registerClass('MemberTests.MultipleArgs');
MemberTests.ImplementedIndexer2.registerClass('MemberTests.ImplementedIndexer2', null, MemberTests.IIndexable);
MemberTests.Test.registerClass('MemberTests.Test');
MemberTests.A.registerClass('MemberTests.A');
MemberTests.B.registerClass('MemberTests.B', MemberTests.A);
MemberTests.C.registerClass('MemberTests.C', MemberTests.B);
