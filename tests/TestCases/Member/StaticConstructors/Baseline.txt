Type.registerNamespace('MemberTests');

////////////////////////////////////////////////////////////////////////////////
// MemberTests.Behavior

MemberTests.Behavior = function(e, name) {
}


////////////////////////////////////////////////////////////////////////////////
// MemberTests.MyClass

MemberTests.MyClass = function(d) {
}


////////////////////////////////////////////////////////////////////////////////
// MemberTests.MyClassEmpty

MemberTests.MyClassEmpty = function() {
}


////////////////////////////////////////////////////////////////////////////////
// MemberTests.MyClassSimple

MemberTests.MyClassSimple = function() {
}


////////////////////////////////////////////////////////////////////////////////
// MemberTests.MyClassSimpleMulti

MemberTests.MyClassSimpleMulti = function() {
}


////////////////////////////////////////////////////////////////////////////////
// MemberTests.MyBehavior

MemberTests.MyBehavior = function(element) {
    MemberTests.MyBehavior.initializeBase(this, [ element, 'myBehavior' ]);
}


MemberTests.Behavior.registerClass('MemberTests.Behavior');
MemberTests.MyClass.registerClass('MemberTests.MyClass');
MemberTests.MyClassEmpty.registerClass('MemberTests.MyClassEmpty');
MemberTests.MyClassSimple.registerClass('MemberTests.MyClassSimple');
MemberTests.MyClassSimpleMulti.registerClass('MemberTests.MyClassSimpleMulti');
MemberTests.MyBehavior.registerClass('MemberTests.MyBehavior', MemberTests.Behavior);
MemberTests.MyClass.instance = null;
MemberTests.MyClass.instance = new MemberTests.MyClass(Date.get_now());
alert('simple static ctor');
alert('simple static ctor with multiple statements');
document.getElementById('foo').innerHTML = '...';
(function () {
    var e = document.body;
    var b = true;
    if (!b) {
        return;
    }
    new MemberTests.MyBehavior(e);
})();
